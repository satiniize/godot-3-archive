[gd_scene load_steps=24 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://player.tscn" type="PackedScene" id=2]

[sub_resource type="VisualShaderNodeTexture" id=14]

[sub_resource type="VisualShaderNodeScalarFunc" id=15]

[sub_resource type="VisualShaderNodeScalarFunc" id=16]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=17]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "step"

[sub_resource type="VisualShaderNodeVectorDecompose" id=19]

[sub_resource type="VisualShaderNodeScalarFunc" id=20]
function = 15

[sub_resource type="VisualShaderNodeVectorCompose" id=21]

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
function = 15

[sub_resource type="VisualShaderNodeScalarFunc" id=23]
function = 15

[sub_resource type="VisualShaderNodeVectorOp" id=24]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=25]
uniform_name = "ScalarUniform"

[sub_resource type="VisualShaderNodeVectorOp" id=26]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=27]

[sub_resource type="VisualShaderNodeScalarOp" id=28]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarFunc" id=29]
function = 28

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible, world_vertex_coords;

uniform float ScalarUniform;
uniform sampler2D tex_frg_2;



void vertex() {
// Input:3
	vec3 n_out3p0 = VERTEX;

// ScalarUniform:28
	float n_out28p0 = ScalarUniform;

// VectorOp:27
	vec3 n_out27p0 = n_out3p0 * vec3(n_out28p0);

// VectorDecompose:22
	float n_out22p0 = n_out27p0.x;
	float n_out22p1 = n_out27p0.y;
	float n_out22p2 = n_out27p0.z;

// ScalarFunc:23
	float n_out23p0 = round(n_out22p0);

// ScalarFunc:25
	float n_out25p0 = round(n_out22p1);

// ScalarFunc:26
	float n_out26p0 = round(n_out22p2);

// VectorCompose:24
	vec3 n_out24p0 = vec3(n_out23p0, n_out25p0, n_out26p0);

// VectorOp:29
	vec3 n_out29p0 = n_out24p0 / vec3(n_out28p0);

// VectorOp:30
	vec3 n_in30p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out30p0 = n_out29p0 + n_in30p1;

// Output:0
	VERTEX = n_out30p0;

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -455, 107 )
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 980, 160 )
nodes/vertex/3/node = SubResource( 10 )
nodes/vertex/3/position = Vector2( -240, 160 )
nodes/vertex/18/node = SubResource( 15 )
nodes/vertex/18/position = Vector2( -480, 480 )
nodes/vertex/19/node = SubResource( 16 )
nodes/vertex/19/position = Vector2( -80, 500 )
nodes/vertex/20/node = SubResource( 17 )
nodes/vertex/20/position = Vector2( 120, 500 )
nodes/vertex/21/node = SubResource( 18 )
nodes/vertex/21/position = Vector2( -461, 563 )
nodes/vertex/22/node = SubResource( 19 )
nodes/vertex/22/position = Vector2( 80, 160 )
nodes/vertex/23/node = SubResource( 20 )
nodes/vertex/23/position = Vector2( 280, 160 )
nodes/vertex/24/node = SubResource( 21 )
nodes/vertex/24/position = Vector2( 440, 160 )
nodes/vertex/25/node = SubResource( 22 )
nodes/vertex/25/position = Vector2( 280, 220 )
nodes/vertex/26/node = SubResource( 23 )
nodes/vertex/26/position = Vector2( 280, 280 )
nodes/vertex/27/node = SubResource( 24 )
nodes/vertex/27/position = Vector2( -80, 160 )
nodes/vertex/28/node = SubResource( 25 )
nodes/vertex/28/position = Vector2( -260, 240 )
nodes/vertex/29/node = SubResource( 26 )
nodes/vertex/29/position = Vector2( 620, 160 )
nodes/vertex/30/node = SubResource( 27 )
nodes/vertex/30/position = Vector2( 800, 160 )
nodes/vertex/31/node = SubResource( 28 )
nodes/vertex/31/position = Vector2( 620, 260 )
nodes/vertex/32/node = SubResource( 29 )
nodes/vertex/32/position = Vector2( 460, 300 )
nodes/vertex/connections = PoolIntArray( 19, 0, 20, 0, 22, 0, 23, 0, 22, 1, 25, 0, 22, 2, 26, 0, 23, 0, 24, 0, 25, 0, 24, 1, 26, 0, 24, 2, 3, 0, 27, 0, 28, 0, 27, 1, 27, 0, 22, 0, 24, 0, 29, 0, 28, 0, 29, 1, 29, 0, 30, 0, 30, 0, 0, 0, 28, 0, 32, 0, 32, 0, 31, 0 )
nodes/fragment/2/node = SubResource( 14 )
nodes/fragment/2/position = Vector2( -320, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/ScalarUniform = 8.0
shader_param/tex_frg_2 = ExtResource( 1 )

[sub_resource type="SpatialMaterial" id=1]
albedo_texture = ExtResource( 1 )
uv1_triplanar = true
uv1_triplanar_sharpness = 1.0

[sub_resource type="CylinderMesh" id=30]
top_radius = 0.0
bottom_radius = 2.0
height = 4.0

[node name="debug" type="Spatial"]

[node name="Player" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0 )

[node name="MeshInstance" parent="Player" index="1"]
material/0 = SubResource( 13 )

[node name="CSGBox" type="CSGBox" parent="."]
material_override = SubResource( 1 )
use_collision = true
width = 16.0
depth = 16.0

[node name="CSGPolygon" type="CSGPolygon" parent="CSGBox"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 3, 1, 1 )
polygon = PoolVector2Array( -1, 0, 5, 3, 5, 0 )
depth = 2.0

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, 5, 2 )
light_color = Color( 0, 1, 0, 1 )
light_energy = 2.0
omni_range = 20.0

[node name="OmniLight2" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2, 5, 2 )
light_color = Color( 0, 0, 1, 1 )
light_energy = 2.0
omni_range = 20.0

[node name="OmniLight3" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 5, -2 )
light_color = Color( 1, 0, 0, 1 )
light_energy = 2.0
omni_range = 20.0

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2, 3, 0 )
mesh = SubResource( 30 )
material/0 = SubResource( 13 )

[editable path="Player"]
