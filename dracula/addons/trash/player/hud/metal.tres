[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 32.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 5.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 32.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, -4.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=11]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "screen_uv"

[sub_resource type="VisualShader" id=17]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out3p0 = TEXTURE_tex_read.rgb;
		n_out3p1 = TEXTURE_tex_read.a;
	}

// Input:9
	vec3 n_out9p0 = vec3(SCREEN_UV, 0.0);

// ScalarOp:11
	float n_in11p1 = 32.00000;
	float n_out11p0 = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)) * n_in11p1;

// Input:5
	float n_out5p0 = TIME;

// ScalarOp:14
	float n_in14p1 = -4.00000;
	float n_out14p0 = n_out5p0 * n_in14p1;

// ScalarOp:13
	float n_out13p0 = n_out11p0 + n_out14p0;

// ScalarFunc:10
	float n_out10p0 = sin(n_out13p0);

// ScalarOp:12
	float n_in12p1 = 5.00000;
	float n_out12p0 = n_out10p0 + n_in12p1;

// ScalarOp:15
	float n_in15p1 = 0.20000;
	float n_out15p0 = n_out12p0 * n_in15p1;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * vec3(n_out15p0);

// VectorOp:16
	vec3 n_out16p0 = n_out4p0 * vec3(n_out3p1);

// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -460, 295 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 160 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -120, 160 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( 80, 100 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( 320, 60 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( -300, 520 )
nodes/fragment/9/node = SubResource( 16 )
nodes/fragment/9/position = Vector2( -340, 400 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( 200, 400 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -120, 360 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( 380, 360 )
nodes/fragment/13/node = SubResource( 8 )
nodes/fragment/13/position = Vector2( 40, 360 )
nodes/fragment/14/node = SubResource( 9 )
nodes/fragment/14/position = Vector2( -120, 480 )
nodes/fragment/15/node = SubResource( 18 )
nodes/fragment/15/position = Vector2( 560, 360 )
nodes/fragment/16/node = SubResource( 19 )
nodes/fragment/16/position = Vector2( 500, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 9, 0, 11, 0, 10, 0, 12, 0, 11, 0, 13, 0, 13, 0, 10, 0, 5, 0, 14, 0, 14, 0, 13, 1, 12, 0, 15, 0, 15, 0, 4, 1, 4, 0, 16, 0, 16, 0, 0, 0, 3, 1, 0, 1, 3, 1, 16, 1, 3, 0, 4, 0 )

[resource]
shader = SubResource( 17 )
